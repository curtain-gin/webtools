"""
Django settings for djangoTools project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-7ts$h&833c41od!3%dfd#fa*s*h9_j(33w1&vs%nmgs*a#c6i3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = False

ALLOWED_HOSTS = ['*']



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'webTools.apps.WebtoolsConfig',
    'django_apscheduler',
    'addcomments',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'webTools.middleware.auth.AuthMiddleware',
    'webTools.middleware.auth_permission.AuthPermissionMiddleware',
    'webTools.middleware.log_middleware.LogMiddleware',
]

ROOT_URLCONF = 'djangoTools.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': []
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoTools.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'webTools/static')  # 注意别忘了写逗号,第二个参数就是项目中你存放静态文件的文件夹名称
]
MEDIA_URL = '/data/'
MEDIA_ROOT = [
    os.path.join(BASE_DIR, 'webTools/data'),  # 注意别忘了写逗号,第二个参数就是项目中你上传下载文件的文件夹名称
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# 日志配置
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用日志器

    # 日志格式
    'formatters': {
        # 详细格式，名字可随意取
        'verbose': {
            # 格式：	报错等级	       报错时间	   模块	       行号	  信息
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        # 简单格式
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
        # 默认
        "default": {
            "format": '%(asctime)s %(name)s  %(pathname)s:%(lineno)d %(module)s:%(funcName)s '
                      '%(levelname)s- %(message)s',
            "datefmt": "%Y-%m-%d %H:%M:%S"
        },
    },

    # 过滤器
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',  # 过滤掉调试信息
        },
    },

    # 处理错误信息的对象
    'handlers': {
        'console': {  # 处理错误信息的控制台对象，即我们在pycharm中看到的调试信息由此控制
            'level': 'DEBUG',  # DEBUG以上级别报错信息都会出现在控制台
            'filters': ['require_debug_true'],  # 设定过滤器
            'class': 'logging.StreamHandler',  # 日志处理器
            'formatter': 'default'  # 日志格式设为默认
        },
        'file': {  # 处理错误信息的file对象
            'level': 'DEBUG',  # 记录INFO级别以上的报错信息
            'class': 'logging.handlers.RotatingFileHandler',  # 日志处理器
            'filename': os.path.join(os.path.dirname(BASE_DIR), "logs/web.log"),
            # 日志位置,日志文件名,日志保存目录logs必须手动创建
            'maxBytes': 300 * 1024 * 1024,  # 日志文件的最大值,这里我们设置300M
            'backupCount': 10,  # 日志文件的数量,设置最大日志数量为10
            'formatter': 'default'  # 日志格式:默认
        },
    },

    # 日志对象
    'loggers': {
        # 日志器名
        'django': {
            'handlers': ['console', 'file'],  # 处理对象有两个，一个conosle对象，一个file对象，这两个对象在上面的handlers中进行了定义和配置
            'propagate': True,  # 是否让日志信息继续冒泡给其他的日志处理系统，子级向父级传播
        },
        'dbloger': {
            'level': 'INFO',
            'handlers':  ['console', 'file'],
            'propagate': True,
        },
        # 'django.db.backends': {
        #     'level': 'DEBUG',
        #     'handlers':  ['console', 'file']
        # },

    }
}

try:
    from .local_setting import *
except ImportError:
    pass
